---
import type * as interfaces from 'lib/interfaces'
import {
  getPosts,
  getAllPosts,
  getRankedPosts,
  getPostBySlug,
  getPostsByTag,
  getBlock,
  getAllTags,
  getAllBlocksByBlockId,
  downloadFile,
} from 'lib/notion/client'
import {
  PUBLIC_SITE_TITLE,
  PUBLIC_SITE_DESCRIPTION,
  PUBLIC_GA_TRACKING_ID,
} from 'server-constants'
import { getPostLink, filePath, extractTargetBlocks } from 'lib/blog-helpers'
import Content from 'components/Content.astro'
import Masthead from 'components/Masthead.astro'
import Image from 'components/Image.astro'
import Tags from 'components/Tags.astro'
import Body from 'components/Body.astro'
import BaseHead from 'components/BaseHead.astro'
import GoogleAnalytics from 'components/GoogleAnalytics.astro'
import Header from 'components/Header.astro'
import Footer from 'components/Footer.astro'
import Layout from 'layouts/Layout.astro'
import PostDate from 'components/PostDate.astro'
import PostTags from 'components/PostTags.astro'
import PostTitle from 'components/PostTitle.astro'
import PostBody from 'components/PostBody.astro'
import PostRelativeLink from 'components/PostRelativeLink.astro'
import BlogPostsLink from 'components/BlogPostsLink.astro'
import BlogTagsLink from 'components/BlogTagsLink.astro'
import styles from 'styles/blog.module.css'

export async function getStaticPaths() {
  const posts = await getAllPosts()
  return posts.map((post: interfaces.Post | any) => ({
    params: { slug: post.Slug },
  }))
}

const { slug } = Astro.params

const post = await getPostBySlug(slug as any)
if (!post) {
  throw new Error('Post not found. slug: ${slug}')
}

const [blocks, allPosts, rankedPosts, recentPosts, tags, postsHavingSameTag] =
  await Promise.all([
    getAllBlocksByBlockId(post.PageId),
    getAllPosts(),
    getRankedPosts(),
    getPosts(5),
    getAllTags(),
    getPostsByTag(post.Tags[0]?.name, 6),
  ])

const fileAtacchedBlocks = extractTargetBlocks('image', blocks)
  .concat(extractTargetBlocks('file', blocks))
  .filter((block) => {
    if (!block) {
      return false
    }
    const imageOrFile = block.Image || block.File
    return imageOrFile && imageOrFile.File && imageOrFile.File.Url
  })

// Download files
await Promise.all(
  fileAtacchedBlocks
    .map(async (block: any) => {
      const expiryTime = (block.Image || block.File).File.ExpiryTime
      if (Date.parse(expiryTime) > Date.now()) {
        return Promise.resolve(block)
      }
      return getBlock(block.Id)
    })
    .map((promise) =>
      promise.then((block) => {
        let url!: URL | any
        try {
          url = new URL((block.Image || block.File).File.Url)
        } catch (err) {
          console.log('Invalid file URL')
          return Promise.reject()
        }
        return Promise.resolve(url)
      })
    )
    .map((promise) => promise.then(downloadFile))
)

const currentPostIndex = allPosts.findIndex((post) => post.Slug === slug)
const prevPost = allPosts[currentPostIndex + 1]
const nextPost = allPosts[currentPostIndex - 1]

let ogImage: any = ''
if (post.FeaturedImage && post.FeaturedImage.Url) {
  ogImage = new URL(filePath(new URL(post.FeaturedImage.Url)), Astro.site)
}

let image = ''
if (post.FeaturedImage && post.FeaturedImage.Url) {
  if (import.meta.env.DEV) {
    image = post.FeaturedImage.Url
  } else {
    image = filePath(new URL(post.FeaturedImage.Url))
  }
}
---

<!DOCTYPE html>
<html lang="en" prefix="og: https://ogp.me/ns#">
  <head>
    <BaseHead
      title={post.Title + ` | ${PUBLIC_SITE_TITLE}`}
      description={post.Excerpt}
      image={ogImage}
    />
  </head>
  <Body>
    <GoogleAnalytics trackingId={PUBLIC_GA_TRACKING_ID} />
    <Header title={PUBLIC_SITE_TITLE} />
    <main class="pt-[56px]">
      <Content className="pt-6">
        <PostTags post={post} />
        <div class="mb-8">
          {
            post.FeaturedImage && (
              <img
                class="border border-slate-300 dark:border-zinc-700 rounded-xl aspect-[2.0] object-cover"
                src={image}
                width={720 * 2}
                height={720}
                alt="Thumbnail"
                loading="eager"
              />
            )
          }
        </div>
        <h1 class="text-3xl my-1 font-mplus">{post.Title}</h1>
        <div>{post.Excerpt}</div>
        <hr class="border-top border-zinc-400 my-4" />
        <PostBody blocks={blocks} />
        <span
          class="underline underline-offset-2 hover:text-orange-500 decoration-orange-500 text-2xl"
        ></span>
      </Content>
    </main>
    <Footer />
  </Body>
  <!-- <Layout
  title={post.Title}
  description={post.Excerpt}
  path={getPostLink(post.Slug as string)}
  ogImage={ogImage}
>
  <div class={styles.container}>
    <main>
      <div class={styles.post}>
        <PostDate post={post} />
        <PostTags post={post} />
        <PostTitle post={post} enableLink={false} />
        <PostBody blocks={blocks} />
        <PostTags post={post} />

        <footer>
          <PostRelativeLink prevPost={prevPost} nextPost={nextPost} />
        </footer>
      </div>
    </main>

    <aside>
      <BlogPostsLink
        heading="Posts in the same category"
        posts={postsHavingSameTag.filter(
          (p: interfaces.Post) => p.Slug !== post.Slug
        )}
      />
      <BlogPostsLink heading="Recommended" posts={rankedPosts} />
      <BlogPostsLink heading="Latest posts" posts={recentPosts} />
      <BlogTagsLink heading="Categories" tags={tags} />
    </aside>
  </div>
</Layout> -->
</html>
